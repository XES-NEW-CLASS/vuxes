(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b289c"],{2514:function(e,s,a){"use strict";a.r(s);var t=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("section",[a("h1",[e._v("Git 规范")]),a("h2",[e._v("1. git flow 工作流")]),a("ul",[a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("master")]),e._v("：主分支，与线上代码一致，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("dev")]),e._v("：开发分支，相对稳定的版本，所有的feature分支和bugfix分支都从该分支创建。其它分支为短期分支，其完成功能开发之后需要删除，包含所有要发布到下一个Release的代码。")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("feature/*")]),e._v("：特性（功能）分支，用于开发新的功能，不同的功能创建不同的功能分支，功能分支开发完成并自测通过之后，需要合并到 dev 分支，之后删除该分支。")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("bugfix/*")]),e._v("：bug修复分支，用于修复不紧急的bug，普通bug均需要创建bugfix分支开发，开发完成自测没问题后合并到 dev 分支后，删除该分支。")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("release")]),e._v("：发布分支，用于代码上线准备，该分支从dev分支创建，创建之后由测试同学发布到测试环境进行测试，测试过程中发现bug需要开发人员在该release分支上进行bug修复，所有bug修复完后，在上线之前，需要合并该release分支到master分支和dev分支。")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("hotfix/*")]),e._v("：紧急bug修复分支，该分支只有在紧急情况下使用，从master分支创建，用于紧急修复线上bug，修复完成后，需要合并该分支到master分支以便上线，同时需要再合并到dev分支，所以hotfix的改动会进入下一个release。")])]),a("div",{staticClass:"tip"},[a("p",[e._v("注意：一旦打了release分支之后不要从dev分支上合并新的改动到Release分支。发布release分支时，合并release到master和dev， 同时在master分支上打个tag记住release版本号，然后可以删除release分支了。")])]),a("h2",[e._v("2. 开发流程")]),a("ul",[a("li",[e._v("开发组件库: 切出功能分支，例如 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("feature/button")])]),a("li",[e._v("合并开发分支: 功能完成后合并到主开发分支")]),a("li",[e._v("组件库发布: 整个组件库功能完成时，从开发分支切出发布分支release，并创建 tag 来标识这个版本，发布成功后合并到master，并删除所有 feature 分支及主开发分支"),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 当前分支 dev")]),e._v("\ngit checkout -b release\ngit tag -a v0.0.1 -m "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'Release version 0.0.1'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 当前分支 master")]),e._v("\ngit merge release\n")])])])]),a("h2",[e._v("3. Commit Message 格式")]),a("ul",[a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("scope")]),e._v(": 一个可选的修改范围，用于标识此次提交主要涉及到代码中哪个模块。")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("type")]),e._v(" 提交类型： "),a("ul",[a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("feat")]),e._v(": 新特性，新功能，表示在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("fix")]),e._v(": 表示在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("docs")]),e._v(": 文档修改")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("style")]),e._v(": 格式化, 缺失分号等; 不包括生产代码变动")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("refactor")]),e._v(": 代码重构")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("perf")]),e._v(": 性能优化")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("test")]),e._v(": 添加缺失的测试, 重构测试, 不包括生产代码变动")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("build")]),e._v(": 构建任务相关的修改（比如gulp、webpack、npm）")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("ci")]),e._v(": 对CI配置文件和脚本的更改（比如：Travis，Circle，BrowserStack，SauceLabs）")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("chore")]),e._v(": 其他修改（不会修改src或测试文件的更改）")]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("revert")]),e._v(": 回滚commit")])])]),a("li",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("subject")]),e._v(" 提交描述 "),a("ul",[a("li",[e._v("对应内容是commit 目的的简短描述，一般不超过50个字符")])])])]),a("p",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("description")]),e._v(": 简明扼要描述本次提交的内容，首字母无需大写，结尾不需要使用 .。")]),a("p",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("optional body")]),e._v(": 详细描述本次提交，比如此次变更的动机，如需换行，则使用 |。")]),a("p",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("optional footer")]),e._v(": 描述与之关联的 issue 或 break change。")]),a("div",{staticClass:"tip"},[a("p",[e._v("注意：提交类型 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("feat")]),e._v(" 和 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("fix")]),e._v(" 慎用，因为最终会生成 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("CHANGELOG")]),e._v(" 版本日志，除非是明确开发了某个重要功能点或修复了某个bug。并且在 standard-version 工具默认启动下，每个 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("feat")]),e._v(" 会自动升级 minor， "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("fix")]),e._v(" 会自动升级 patch，一般会指定参数发布。")])]),a("h2",[e._v("4. standard-version")]),a("p",[e._v("版本格式：主版本号.次版本号.修订号，版本号递增规则如下：")]),a("ul",[a("li",[e._v("主版本号（major）：当你做了不兼容的 API 修改。")]),a("li",[e._v("次版本号（minor）：当你做了向下兼容的功能性新增，可以理解为 Feature 版本。")]),a("li",[e._v("修订号（patch）：当你做了向下兼容的问题修正，可以理解为 Bug fix 版本。")])]),a("p",[e._v("先行版本号及版本编译信息可以加到 “主版本号.次版本号.修订号” 的后面，作为延伸。Semver 规范中使用alpha、beta、rc 来修饰即将要发布的版本。它们的含义是：")]),a("ul",[a("li",[e._v("alpha：内测版本。")]),a("li",[e._v("beta：公测版本。")]),a("li",[e._v("rc：即 Release Candiate，正式版本的候选版本。")])]),a("p",[e._v("在发布 npm 包时，为了让我们更好的遵从 Semver 规范，npm 为我们提供了 npm version 命令，具体使用方式如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级补丁版本号：")]),e._v("\nnpm version patch\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级小版本号：")]),e._v("\nnpm version minor\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级大版本号：")]),e._v("\nnpm version major\n")])]),a("p",[e._v("这里使用 standard-version 代替")]),a("h3",[e._v("4.1 standard-version 使用")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# --release-as, -r 指定版本号 (需要遵循语义化版本（ semver） 规范)")]),e._v("\nstandard-version -r minor "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# output 1.1.0")]),e._v("\nstandard-version -r 2.0.0 "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# output 2.0.0")]),e._v("\nstandard-version -r 2.0.0-test "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# output 2.0.0-test")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# --prerelease, -p 预发版本命名")]),e._v("\nstandard-version -p alpha "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 当前版本2.0.0，output 2.0.0-alpha.0")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# --tag-prefix, -t 版本 tag 前缀（默认 v）")]),e._v("\nstandard-version --tag-prefix "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"stable-"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 当前版本2.0.0，output tag: stable-v2.0.0")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# npx 执行")]),e._v("\nnpx standard-version --release-as major "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级主版本")]),e._v("\nnpx standard-version --release-as minor "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级次版本")]),e._v("\nnpx standard-version --release-as patch "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 升级修订版")]),e._v("\n\nnpx standard-version --prerelease alpha "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 内测版")]),e._v("\nnpx standard-version --prerelease beta "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 公测版")]),e._v("\nnpx standard-version --prerelease rc "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 候选版")]),e._v("\n")])]),a("div",{staticClass:"tip"},[a("p",[a("a",{attrs:{href:"https://juejin.im/post/5ad413ba6fb9a028b5485866"}},[e._v("Semver(语义化版本号)扫盲")])])]),a("h3",[e._v("4.2 standard-version 运行时机")]),a("ul",[a("li",[e._v("release 分支流程中运行")])]),a("div",{staticClass:"tip"},[a("p",[e._v("git flow在release finish阶段是把release/*分支合并到master和dev，所以standard-version就是要在finish结束之前运行生成changelog.")])]),a("p",[a("strong",[e._v("standard-version在release流程中注意事项：")])]),a("ul",[a("li",[e._v("release中生成beta版本的changelog")])]),a("div",{staticClass:"tip"},[a("p",[a("strong",[e._v("前置条件：")])]),a("ul",[a("li",[e._v("release 在hotfix之前创建")]),a("li",[e._v("hotfix中生成changelog")]),a("li",[e._v("release中生成beta版的changelog")])]),a("p",[e._v("release分支的创建时机很重要，git flow流程中release在hotfix之后创建 如果创建release分支之后，出现并修复hotfix并且在hotfix生成changelog，hotfix finish之后release finish就会造成release合并到master和dev时出现冲突.")]),a("p",[a("strong",[e._v("解决方案：")])]),a("p",[e._v("release 分支包含hotfix内容（release 分支在hotfix之后创建，或者hotfix提取成patch，在release分支上apply）（git flow流程中hotfix是包含在next release中的）")])]),a("ul",[a("li",[e._v("hotfix分支流程中运行")])]),a("p",[e._v("hotfix finish阶段和release非常像是把hotfix/*分支合并到master和dev，但是是否在hotfix分支生成changelog还需要自行决定（有冲突的风险）")]),a("p",[a("strong",[e._v("standard-version在hotfix流程中注意事项：")])]),a("ul",[a("li",[e._v("hotfix中生成changelog")])]),a("div",{staticClass:"warning"},[a("p",[e._v("release分支在hotfix finish 之前建立，会出现在release分支一样的问题")])]),a("ul",[a("li",[e._v("hotfix分支不生成changelog")])]),a("div",{staticClass:"warning"},[a("p",[e._v("release分支在hotfix finish 之前建立，会造成hotfix修复的的日志无法出现在changelog中")])]),a("div",{staticClass:"tip"},[a("p",[e._v("解决方法：")]),a("p",[e._v("release 分支包含hotfix内容（release 分支在hotfix之后创建，或者hotfix提取成patch，在release分支上apply）")])]),a("h2",[e._v("5. 组件库发布 Github Tag（standard-version会自动打Tag）")]),a("p",[e._v("当组件库完成时，我们可以创建一个tag来指向一个关键时期，比如版本号更新的时候可以建一个“v1.0”、“v2.0”之类的标签，这样在以后回顾的时候会比较方便。tag的使用很简单，主要操作有：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 查看tag，列出所有tag，列出的tag是按字母排序的，和创建时间没关系。")]),e._v("\ngit tag\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# v0.1.0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# v0.1.1")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 显示tag信息")]),e._v("\ngit show v0.1.0\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 创建tag")]),e._v("\ngit tag v0.1.0\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 带信息的tag：-m后面带的就是注释信息")]),e._v("\ngit tag -a v0.1.0 -m "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'Release version 0.1.0'")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 我们在执行 git push 的时候，tag是不会上传到服务器的，比如现在的github，创建 tag 后 git push ，在github网页上是看不到tag 的，为了共享这些tag，你必须这样：")]),e._v("\ngit push origin v0.1.0\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# or")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 将所有tag 一次全部push到github上。")]),e._v("\ngit push origin --tags\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 删除tag")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 删除本地tag")]),e._v("\ngit tag -d v0.1.0\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 删除github远端的指定tag")]),e._v("\ngit push origin :refs/tags/v0.1.0\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 创建一个基于指定tag的分支")]),e._v("\ngit checkout -b dev/v0.1.0 v0.1.0\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 切换到指定tag")]),e._v("\ngit checkout tag\n")])]),a("div",{staticClass:"tip"},[a("p",[e._v("切换到tag历史记录会处在分离头指针状态，这个时候修改是很危险的，在切换回主线时如果没有合并，之前的修改提交基本都会丢失，如果需要修改可以尝试 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("git checkout -b branch tag")]),e._v(" 创建一个基于指定tag的分支，例如："),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("git checkout -b tset v0.1.0")]),e._v(" 这个时候就会在分支上进行开发，之后可以切换到主线合并")])]),a("h2",[e._v("6. Git 操作技巧")]),a("p",[e._v("除了一些基本的 git 命令用法，这里列举几个工作中经常用到的命令")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# merge 命令会造成 commit 历史分叉，如果不希望历史出现分叉，可以 rebase（在新位置重新提交）")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 一般用 rebase 合并多个commit， rebase 是站在需要被 rebase 的 commit 上进行操作，这点和 merge 是不同的")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# merge使用")]),e._v("\ngit checkout master\ngit merge branch1\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# rebase使用")]),e._v("\ngit rebase 目标基础点\n")])]),a("h3",[e._v("6.1 刚提交了一个代码，发现有几个地方写错了")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("git commit --amend\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 如果集成了 commitizen，使用如下命令")]),e._v("\ngit cz --amend\n")])]),a("div",{staticClass:"tip"},[a("p",[e._v('"amend" 是「修正」的意思。在提交时，如果加上 --amend 参数，Git 不会在当前 commit 上增加 commit，而是会把当前 commit 里的内容和暂存区（stageing area）里的内容合并起来后创建一个新的 commit，用这个新的 commit 把当前 commit 替换掉。所以 commit --amend 做的事就是它的字面意思：对最新一条 commit 进行修正。')])]),a("h3",[e._v("6.2 如果写错的不是最新的提交，而是倒数第二个怎么办")]),a("p",[a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("commit --amend")]),e._v(" 可以修复最新 commit 的错误，但如果是倒数第二个 commit，可以使用 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("rebase -i")]),e._v("(交互式 rebase)，所谓「交互式 rebase」，就是在 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("rebase")]),e._v(" 的操作执行之前，你可以指定要 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("rebase")]),e._v(" 的 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("commit")]),e._v(" 链中的每一个 "),a("code",{pre:!0,attrs:{class:"code_inline"}},[e._v("commit")]),e._v(" 是否需要进一步修改。")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("git rebase -i HEAD^^\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# or")]),e._v("\ngit rebase -i HEAD~2\n")])]),a("div",{staticClass:"tip"},[a("p",[e._v("说明：在 Git 中，有两个「偏移符号」： ^ 和 ~")]),a("p",[e._v("^ 的用法：在 commit 的后面加一个或多个 ^ 号，可以把 commit 往回偏移，偏移的数量是 ^ 的数量。")]),a("p",[e._v("~ 的用法：在 commit 的后面加上 ~ 号和一个数，可以把 commit 往回偏移，偏移的数量是 ~ 号后面的数。")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 修改写错的 commit，用 commit --amend 来把修正应用到当前最新的 commit：")]),e._v("\ngit add .\ngit cz --amend\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 继续 rebase 过程，在修复完成之后，就可以用 rebase --continue 来继续 rebase 过程，把后面的 commit 直接应用上去")]),e._v("\ngit rebase --"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("continue")]),e._v("\n")])]),a("h3",[e._v("6.3 直接丢弃刚写的提交")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("git reset --hard HEAD^\n")])])])}],n=a("2877"),l={},i=Object(n["a"])(l,t,r,!1,null,null,null);s["default"]=i.exports}}]);